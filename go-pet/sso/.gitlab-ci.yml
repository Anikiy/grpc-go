stages:
  - build
  - test
  - upload
  - deploy

include:
  - template: Jobs/SAST.gitlab-ci.yml
  
services:
  - docker:dind

cache:
  paths:
    - go-pet/sso

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  DOCKER_HOST: tcp://docker:2376/
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  DOCKER_TLS_VERIFY: "1"
  DOCKER_TLS_CERTDIR: "/certs"
  CGO_ENABLED: "1"

  # DOCKER_TLS_CERTDIR=""

build-sso-code-job: 
  stage: build # этап build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  rules: # rules и only в данных случаях взаимозаменяемы
    - changes: # запуск этого шага только при изменениях в директориях backend
      - /sso/**/*
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd go-pet/sso
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/go-auth:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/go-auth:$CI_COMMIT_SHA

semgrep-sast:
  stage: test
  variables:
    COMPILE: "true"
  needs:
    - build-sso-code-job
    
# go-test:
#   image: golang:1.21.5-alpine3.18
#   stage: test
#   script:
#     - cd go-pet/sso
#     - go test ./tests -count=1 -v
#   needs:
#     - build-sso-code-job

upload-sso-latest:
  stage: upload
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  needs: 
      #- go-test
      - semgrep-sast
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/go-auth:$CI_COMMIT_SHA
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/go-auth:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/go-auth:latest
    - docker push $CI_REGISTRY_IMAGE/go-auth:latest


deploy:
  stage: deploy
  image: alpine:3.15.0
  needs:
    - upload-sso-latest
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp -r ./chart/go-auth/ ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/go-auth
    - ssh ${DEV_USER}@${DEV_HOST} 'helm install go-auth go-auth/'
    - ssh ${DEV_USER}@${DEV_HOST} 'rm -r go-auth/'
    # # - scp -r ./chart/go-auth/charts/go-auth ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/grpc-auth
    # # - ssh ${DEV_USER}@${DEV_HOST} "helm install grpc-auth /grpc-auth"
    # # - ssh ${DEV_USER}@${DEV_HOST} "rm -r /grpc-auth"
    # - ssh ${DEV_USER}@${DEV_HOST} 'docker info'
  when: manual